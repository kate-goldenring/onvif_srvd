// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvif_firmware_update.proto

#include "onvif_firmware_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onvif_firmware_update {
constexpr UpdateFirmwareRequest::UpdateFirmwareRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reboot_time_secs_(0){}
struct UpdateFirmwareRequestDefaultTypeInternal {
  constexpr UpdateFirmwareRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateFirmwareRequestDefaultTypeInternal() {}
  union {
    UpdateFirmwareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateFirmwareRequestDefaultTypeInternal _UpdateFirmwareRequest_default_instance_;
constexpr UpdateFirmwareReply::UpdateFirmwareReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateFirmwareReplyDefaultTypeInternal {
  constexpr UpdateFirmwareReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateFirmwareReplyDefaultTypeInternal() {}
  union {
    UpdateFirmwareReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateFirmwareReplyDefaultTypeInternal _UpdateFirmwareReply_default_instance_;
}  // namespace onvif_firmware_update
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onvif_5ffirmware_5fupdate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_onvif_5ffirmware_5fupdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onvif_5ffirmware_5fupdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_onvif_5ffirmware_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareRequest, version_),
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareRequest, reboot_time_secs_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::onvif_firmware_update::UpdateFirmwareReply, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::onvif_firmware_update::UpdateFirmwareRequest)},
  { 9, -1, sizeof(::onvif_firmware_update::UpdateFirmwareReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onvif_firmware_update::_UpdateFirmwareRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onvif_firmware_update::_UpdateFirmwareReply_default_instance_),
};

const char descriptor_table_protodef_onvif_5ffirmware_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033onvif_firmware_update.proto\022\025onvif_fir"
  "mware_update\"\\\n\025UpdateFirmwareRequest\022\017\n"
  "\007version\030\001 \001(\t\022\035\n\020reboot_time_secs\030\002 \001(\005"
  "H\000\210\001\001B\023\n\021_reboot_time_secs\"&\n\023UpdateFirm"
  "wareReply\022\017\n\007version\030\001 \001(\t2~\n\016FirmwareUp"
  "date\022l\n\016UpdateFirmware\022,.onvif_firmware_"
  "update.UpdateFirmwareRequest\032*.onvif_fir"
  "mware_update.UpdateFirmwareReply\"\000b\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onvif_5ffirmware_5fupdate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onvif_5ffirmware_5fupdate_2eproto = {
  false, false, 322, descriptor_table_protodef_onvif_5ffirmware_5fupdate_2eproto, "onvif_firmware_update.proto", 
  &descriptor_table_onvif_5ffirmware_5fupdate_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_onvif_5ffirmware_5fupdate_2eproto::offsets,
  file_level_metadata_onvif_5ffirmware_5fupdate_2eproto, file_level_enum_descriptors_onvif_5ffirmware_5fupdate_2eproto, file_level_service_descriptors_onvif_5ffirmware_5fupdate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onvif_5ffirmware_5fupdate_2eproto_getter() {
  return &descriptor_table_onvif_5ffirmware_5fupdate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onvif_5ffirmware_5fupdate_2eproto(&descriptor_table_onvif_5ffirmware_5fupdate_2eproto);
namespace onvif_firmware_update {

// ===================================================================

class UpdateFirmwareRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateFirmwareRequest>()._has_bits_);
  static void set_has_reboot_time_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateFirmwareRequest::UpdateFirmwareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onvif_firmware_update.UpdateFirmwareRequest)
}
UpdateFirmwareRequest::UpdateFirmwareRequest(const UpdateFirmwareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  reboot_time_secs_ = from.reboot_time_secs_;
  // @@protoc_insertion_point(copy_constructor:onvif_firmware_update.UpdateFirmwareRequest)
}

inline void UpdateFirmwareRequest::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reboot_time_secs_ = 0;
}

UpdateFirmwareRequest::~UpdateFirmwareRequest() {
  // @@protoc_insertion_point(destructor:onvif_firmware_update.UpdateFirmwareRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateFirmwareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateFirmwareRequest::ArenaDtor(void* object) {
  UpdateFirmwareRequest* _this = reinterpret_cast< UpdateFirmwareRequest* >(object);
  (void)_this;
}
void UpdateFirmwareRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFirmwareRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateFirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onvif_firmware_update.UpdateFirmwareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  reboot_time_secs_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFirmwareRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onvif_firmware_update.UpdateFirmwareRequest.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reboot_time_secs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reboot_time_secs(&has_bits);
          reboot_time_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFirmwareRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onvif_firmware_update.UpdateFirmwareRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareRequest.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional int32 reboot_time_secs = 2;
  if (_internal_has_reboot_time_secs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_reboot_time_secs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onvif_firmware_update.UpdateFirmwareRequest)
  return target;
}

size_t UpdateFirmwareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onvif_firmware_update.UpdateFirmwareRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // optional int32 reboot_time_secs = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reboot_time_secs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateFirmwareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateFirmwareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateFirmwareRequest::GetClassData() const { return &_class_data_; }

void UpdateFirmwareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateFirmwareRequest *>(to)->MergeFrom(
      static_cast<const UpdateFirmwareRequest &>(from));
}


void UpdateFirmwareRequest::MergeFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_reboot_time_secs()) {
    _internal_set_reboot_time_secs(from._internal_reboot_time_secs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateFirmwareRequest::CopyFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareRequest::IsInitialized() const {
  return true;
}

void UpdateFirmwareRequest::InternalSwap(UpdateFirmwareRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  swap(reboot_time_secs_, other->reboot_time_secs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFirmwareRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onvif_5ffirmware_5fupdate_2eproto_getter, &descriptor_table_onvif_5ffirmware_5fupdate_2eproto_once,
      file_level_metadata_onvif_5ffirmware_5fupdate_2eproto[0]);
}

// ===================================================================

class UpdateFirmwareReply::_Internal {
 public:
};

UpdateFirmwareReply::UpdateFirmwareReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onvif_firmware_update.UpdateFirmwareReply)
}
UpdateFirmwareReply::UpdateFirmwareReply(const UpdateFirmwareReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onvif_firmware_update.UpdateFirmwareReply)
}

inline void UpdateFirmwareReply::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateFirmwareReply::~UpdateFirmwareReply() {
  // @@protoc_insertion_point(destructor:onvif_firmware_update.UpdateFirmwareReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateFirmwareReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateFirmwareReply::ArenaDtor(void* object) {
  UpdateFirmwareReply* _this = reinterpret_cast< UpdateFirmwareReply* >(object);
  (void)_this;
}
void UpdateFirmwareReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateFirmwareReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateFirmwareReply::Clear() {
// @@protoc_insertion_point(message_clear_start:onvif_firmware_update.UpdateFirmwareReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateFirmwareReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onvif_firmware_update.UpdateFirmwareReply.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateFirmwareReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onvif_firmware_update.UpdateFirmwareReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareReply.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onvif_firmware_update.UpdateFirmwareReply)
  return target;
}

size_t UpdateFirmwareReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onvif_firmware_update.UpdateFirmwareReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateFirmwareReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateFirmwareReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateFirmwareReply::GetClassData() const { return &_class_data_; }

void UpdateFirmwareReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateFirmwareReply *>(to)->MergeFrom(
      static_cast<const UpdateFirmwareReply &>(from));
}


void UpdateFirmwareReply::MergeFrom(const UpdateFirmwareReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onvif_firmware_update.UpdateFirmwareReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateFirmwareReply::CopyFrom(const UpdateFirmwareReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onvif_firmware_update.UpdateFirmwareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareReply::IsInitialized() const {
  return true;
}

void UpdateFirmwareReply::InternalSwap(UpdateFirmwareReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateFirmwareReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onvif_5ffirmware_5fupdate_2eproto_getter, &descriptor_table_onvif_5ffirmware_5fupdate_2eproto_once,
      file_level_metadata_onvif_5ffirmware_5fupdate_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onvif_firmware_update
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onvif_firmware_update::UpdateFirmwareRequest* Arena::CreateMaybeMessage< ::onvif_firmware_update::UpdateFirmwareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onvif_firmware_update::UpdateFirmwareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onvif_firmware_update::UpdateFirmwareReply* Arena::CreateMaybeMessage< ::onvif_firmware_update::UpdateFirmwareReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onvif_firmware_update::UpdateFirmwareReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
