// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvif_firmware_update.proto

#ifndef PROTOBUF_onvif_5ffirmware_5fupdate_2eproto__INCLUDED
#define PROTOBUF_onvif_5ffirmware_5fupdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace onvif_firmware_update {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
void protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto();
void protobuf_ShutdownFile_onvif_5ffirmware_5fupdate_2eproto();

class UpdateFirmwareReply;
class UpdateFirmwareRequest;

// ===================================================================

class UpdateFirmwareRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onvif_firmware_update.UpdateFirmwareRequest) */ {
 public:
  UpdateFirmwareRequest();
  virtual ~UpdateFirmwareRequest();

  UpdateFirmwareRequest(const UpdateFirmwareRequest& from);

  inline UpdateFirmwareRequest& operator=(const UpdateFirmwareRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFirmwareRequest& default_instance();

  void Swap(UpdateFirmwareRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateFirmwareRequest* New() const { return New(NULL); }

  UpdateFirmwareRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFirmwareRequest& from);
  void MergeFrom(const UpdateFirmwareRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateFirmwareRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int32 reboot_time_secs = 2;
  void clear_reboot_time_secs();
  static const int kRebootTimeSecsFieldNumber = 2;
  ::google::protobuf::int32 reboot_time_secs() const;
  void set_reboot_time_secs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:onvif_firmware_update.UpdateFirmwareRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int32 reboot_time_secs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  friend void protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_onvif_5ffirmware_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static UpdateFirmwareRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateFirmwareReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:onvif_firmware_update.UpdateFirmwareReply) */ {
 public:
  UpdateFirmwareReply();
  virtual ~UpdateFirmwareReply();

  UpdateFirmwareReply(const UpdateFirmwareReply& from);

  inline UpdateFirmwareReply& operator=(const UpdateFirmwareReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFirmwareReply& default_instance();

  void Swap(UpdateFirmwareReply* other);

  // implements Message ----------------------------------------------

  inline UpdateFirmwareReply* New() const { return New(NULL); }

  UpdateFirmwareReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateFirmwareReply& from);
  void MergeFrom(const UpdateFirmwareReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateFirmwareReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:onvif_firmware_update.UpdateFirmwareReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  friend void protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_onvif_5ffirmware_5fupdate_2eproto();

  void InitAsDefaultInstance();
  static UpdateFirmwareReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateFirmwareRequest

// optional string version = 1;
inline void UpdateFirmwareRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFirmwareRequest::version() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareRequest.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareRequest.version)
}
inline void UpdateFirmwareRequest::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvif_firmware_update.UpdateFirmwareRequest.version)
}
inline void UpdateFirmwareRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvif_firmware_update.UpdateFirmwareRequest.version)
}
inline ::std::string* UpdateFirmwareRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:onvif_firmware_update.UpdateFirmwareRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFirmwareRequest::release_version() {
  // @@protoc_insertion_point(field_release:onvif_firmware_update.UpdateFirmwareRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:onvif_firmware_update.UpdateFirmwareRequest.version)
}

// optional int32 reboot_time_secs = 2;
inline void UpdateFirmwareRequest::clear_reboot_time_secs() {
  reboot_time_secs_ = 0;
}
inline ::google::protobuf::int32 UpdateFirmwareRequest::reboot_time_secs() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareRequest.reboot_time_secs)
  return reboot_time_secs_;
}
inline void UpdateFirmwareRequest::set_reboot_time_secs(::google::protobuf::int32 value) {
  
  reboot_time_secs_ = value;
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareRequest.reboot_time_secs)
}

// -------------------------------------------------------------------

// UpdateFirmwareReply

// optional string version = 1;
inline void UpdateFirmwareReply::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFirmwareReply::version() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareReply.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareReply::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareReply.version)
}
inline void UpdateFirmwareReply::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvif_firmware_update.UpdateFirmwareReply.version)
}
inline void UpdateFirmwareReply::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvif_firmware_update.UpdateFirmwareReply.version)
}
inline ::std::string* UpdateFirmwareReply::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:onvif_firmware_update.UpdateFirmwareReply.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFirmwareReply::release_version() {
  // @@protoc_insertion_point(field_release:onvif_firmware_update.UpdateFirmwareReply.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFirmwareReply::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:onvif_firmware_update.UpdateFirmwareReply.version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onvif_firmware_update

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_onvif_5ffirmware_5fupdate_2eproto__INCLUDED
