// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onvif_firmware_update.proto

#include "onvif_firmware_update.pb.h"
#include "onvif_firmware_update.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace onvif_firmware_update {

static const char* FirmwareUpdate_method_names[] = {
  "/onvif_firmware_update.FirmwareUpdate/UpdateFirmware",
};

std::unique_ptr< FirmwareUpdate::Stub> FirmwareUpdate::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FirmwareUpdate::Stub> stub(new FirmwareUpdate::Stub(channel));
  return stub;
}

FirmwareUpdate::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UpdateFirmware_(FirmwareUpdate_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FirmwareUpdate::Stub::UpdateFirmware(::grpc::ClientContext* context, const ::onvif_firmware_update::UpdateFirmwareRequest& request, ::onvif_firmware_update::UpdateFirmwareReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateFirmware_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::onvif_firmware_update::UpdateFirmwareReply>* FirmwareUpdate::Stub::AsyncUpdateFirmwareRaw(::grpc::ClientContext* context, const ::onvif_firmware_update::UpdateFirmwareRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::onvif_firmware_update::UpdateFirmwareReply>(channel_.get(), cq, rpcmethod_UpdateFirmware_, context, request);
}

FirmwareUpdate::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FirmwareUpdate_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FirmwareUpdate::Service, ::onvif_firmware_update::UpdateFirmwareRequest, ::onvif_firmware_update::UpdateFirmwareReply>(
          std::mem_fn(&FirmwareUpdate::Service::UpdateFirmware), this)));
}

FirmwareUpdate::Service::~Service() {
}

::grpc::Status FirmwareUpdate::Service::UpdateFirmware(::grpc::ServerContext* context, const ::onvif_firmware_update::UpdateFirmwareRequest* request, ::onvif_firmware_update::UpdateFirmwareReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onvif_firmware_update

