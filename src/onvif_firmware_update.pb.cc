// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onvif_firmware_update.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "onvif_firmware_update.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace onvif_firmware_update {

namespace {

const ::google::protobuf::Descriptor* UpdateFirmwareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFirmwareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFirmwareReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFirmwareReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto() {
  protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "onvif_firmware_update.proto");
  GOOGLE_CHECK(file != NULL);
  UpdateFirmwareRequest_descriptor_ = file->message_type(0);
  static const int UpdateFirmwareRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareRequest, reboot_time_secs_),
  };
  UpdateFirmwareRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateFirmwareRequest_descriptor_,
      UpdateFirmwareRequest::default_instance_,
      UpdateFirmwareRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateFirmwareRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareRequest, _is_default_instance_));
  UpdateFirmwareReply_descriptor_ = file->message_type(1);
  static const int UpdateFirmwareReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareReply, version_),
  };
  UpdateFirmwareReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateFirmwareReply_descriptor_,
      UpdateFirmwareReply::default_instance_,
      UpdateFirmwareReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateFirmwareReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFirmwareReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_onvif_5ffirmware_5fupdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateFirmwareRequest_descriptor_, &UpdateFirmwareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateFirmwareReply_descriptor_, &UpdateFirmwareReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_onvif_5ffirmware_5fupdate_2eproto() {
  delete UpdateFirmwareRequest::default_instance_;
  delete UpdateFirmwareRequest_reflection_;
  delete UpdateFirmwareReply::default_instance_;
  delete UpdateFirmwareReply_reflection_;
}

void protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033onvif_firmware_update.proto\022\025onvif_fir"
    "mware_update\"B\n\025UpdateFirmwareRequest\022\017\n"
    "\007version\030\001 \001(\t\022\030\n\020reboot_time_secs\030\002 \001(\005"
    "\"&\n\023UpdateFirmwareReply\022\017\n\007version\030\001 \001(\t"
    "2~\n\016FirmwareUpdate\022l\n\016UpdateFirmware\022,.o"
    "nvif_firmware_update.UpdateFirmwareReque"
    "st\032*.onvif_firmware_update.UpdateFirmwar"
    "eReply\"\000b\006proto3", 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "onvif_firmware_update.proto", &protobuf_RegisterTypes);
  UpdateFirmwareRequest::default_instance_ = new UpdateFirmwareRequest();
  UpdateFirmwareReply::default_instance_ = new UpdateFirmwareReply();
  UpdateFirmwareRequest::default_instance_->InitAsDefaultInstance();
  UpdateFirmwareReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_onvif_5ffirmware_5fupdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_onvif_5ffirmware_5fupdate_2eproto {
  StaticDescriptorInitializer_onvif_5ffirmware_5fupdate_2eproto() {
    protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  }
} static_descriptor_initializer_onvif_5ffirmware_5fupdate_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFirmwareRequest::kVersionFieldNumber;
const int UpdateFirmwareRequest::kRebootTimeSecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFirmwareRequest::UpdateFirmwareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onvif_firmware_update.UpdateFirmwareRequest)
}

void UpdateFirmwareRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateFirmwareRequest::UpdateFirmwareRequest(const UpdateFirmwareRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onvif_firmware_update.UpdateFirmwareRequest)
}

void UpdateFirmwareRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reboot_time_secs_ = 0;
}

UpdateFirmwareRequest::~UpdateFirmwareRequest() {
  // @@protoc_insertion_point(destructor:onvif_firmware_update.UpdateFirmwareRequest)
  SharedDtor();
}

void UpdateFirmwareRequest::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateFirmwareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFirmwareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFirmwareRequest_descriptor_;
}

const UpdateFirmwareRequest& UpdateFirmwareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  return *default_instance_;
}

UpdateFirmwareRequest* UpdateFirmwareRequest::default_instance_ = NULL;

UpdateFirmwareRequest* UpdateFirmwareRequest::New(::google::protobuf::Arena* arena) const {
  UpdateFirmwareRequest* n = new UpdateFirmwareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateFirmwareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onvif_firmware_update.UpdateFirmwareRequest)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reboot_time_secs_ = 0;
}

bool UpdateFirmwareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onvif_firmware_update.UpdateFirmwareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onvif_firmware_update.UpdateFirmwareRequest.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reboot_time_secs;
        break;
      }

      // optional int32 reboot_time_secs = 2;
      case 2: {
        if (tag == 16) {
         parse_reboot_time_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reboot_time_secs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onvif_firmware_update.UpdateFirmwareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onvif_firmware_update.UpdateFirmwareRequest)
  return false;
#undef DO_
}

void UpdateFirmwareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onvif_firmware_update.UpdateFirmwareRequest)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareRequest.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional int32 reboot_time_secs = 2;
  if (this->reboot_time_secs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reboot_time_secs(), output);
  }

  // @@protoc_insertion_point(serialize_end:onvif_firmware_update.UpdateFirmwareRequest)
}

::google::protobuf::uint8* UpdateFirmwareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onvif_firmware_update.UpdateFirmwareRequest)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareRequest.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional int32 reboot_time_secs = 2;
  if (this->reboot_time_secs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reboot_time_secs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onvif_firmware_update.UpdateFirmwareRequest)
  return target;
}

int UpdateFirmwareRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:onvif_firmware_update.UpdateFirmwareRequest)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional int32 reboot_time_secs = 2;
  if (this->reboot_time_secs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reboot_time_secs());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFirmwareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateFirmwareRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateFirmwareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onvif_firmware_update.UpdateFirmwareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onvif_firmware_update.UpdateFirmwareRequest)
    MergeFrom(*source);
  }
}

void UpdateFirmwareRequest::MergeFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.reboot_time_secs() != 0) {
    set_reboot_time_secs(from.reboot_time_secs());
  }
}

void UpdateFirmwareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFirmwareRequest::CopyFrom(const UpdateFirmwareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onvif_firmware_update.UpdateFirmwareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareRequest::IsInitialized() const {

  return true;
}

void UpdateFirmwareRequest::Swap(UpdateFirmwareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFirmwareRequest::InternalSwap(UpdateFirmwareRequest* other) {
  version_.Swap(&other->version_);
  std::swap(reboot_time_secs_, other->reboot_time_secs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateFirmwareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFirmwareRequest_descriptor_;
  metadata.reflection = UpdateFirmwareRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateFirmwareRequest

// optional string version = 1;
void UpdateFirmwareRequest::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateFirmwareRequest::version() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareRequest.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateFirmwareRequest::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareRequest.version)
}
 void UpdateFirmwareRequest::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvif_firmware_update.UpdateFirmwareRequest.version)
}
 void UpdateFirmwareRequest::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvif_firmware_update.UpdateFirmwareRequest.version)
}
 ::std::string* UpdateFirmwareRequest::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:onvif_firmware_update.UpdateFirmwareRequest.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateFirmwareRequest::release_version() {
  // @@protoc_insertion_point(field_release:onvif_firmware_update.UpdateFirmwareRequest.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateFirmwareRequest::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:onvif_firmware_update.UpdateFirmwareRequest.version)
}

// optional int32 reboot_time_secs = 2;
void UpdateFirmwareRequest::clear_reboot_time_secs() {
  reboot_time_secs_ = 0;
}
 ::google::protobuf::int32 UpdateFirmwareRequest::reboot_time_secs() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareRequest.reboot_time_secs)
  return reboot_time_secs_;
}
 void UpdateFirmwareRequest::set_reboot_time_secs(::google::protobuf::int32 value) {
  
  reboot_time_secs_ = value;
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareRequest.reboot_time_secs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateFirmwareReply::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateFirmwareReply::UpdateFirmwareReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:onvif_firmware_update.UpdateFirmwareReply)
}

void UpdateFirmwareReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateFirmwareReply::UpdateFirmwareReply(const UpdateFirmwareReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:onvif_firmware_update.UpdateFirmwareReply)
}

void UpdateFirmwareReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpdateFirmwareReply::~UpdateFirmwareReply() {
  // @@protoc_insertion_point(destructor:onvif_firmware_update.UpdateFirmwareReply)
  SharedDtor();
}

void UpdateFirmwareReply::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpdateFirmwareReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFirmwareReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFirmwareReply_descriptor_;
}

const UpdateFirmwareReply& UpdateFirmwareReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_onvif_5ffirmware_5fupdate_2eproto();
  return *default_instance_;
}

UpdateFirmwareReply* UpdateFirmwareReply::default_instance_ = NULL;

UpdateFirmwareReply* UpdateFirmwareReply::New(::google::protobuf::Arena* arena) const {
  UpdateFirmwareReply* n = new UpdateFirmwareReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateFirmwareReply::Clear() {
// @@protoc_insertion_point(message_clear_start:onvif_firmware_update.UpdateFirmwareReply)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdateFirmwareReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:onvif_firmware_update.UpdateFirmwareReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "onvif_firmware_update.UpdateFirmwareReply.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:onvif_firmware_update.UpdateFirmwareReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:onvif_firmware_update.UpdateFirmwareReply)
  return false;
#undef DO_
}

void UpdateFirmwareReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:onvif_firmware_update.UpdateFirmwareReply)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareReply.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:onvif_firmware_update.UpdateFirmwareReply)
}

::google::protobuf::uint8* UpdateFirmwareReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:onvif_firmware_update.UpdateFirmwareReply)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "onvif_firmware_update.UpdateFirmwareReply.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:onvif_firmware_update.UpdateFirmwareReply)
  return target;
}

int UpdateFirmwareReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:onvif_firmware_update.UpdateFirmwareReply)
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFirmwareReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:onvif_firmware_update.UpdateFirmwareReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateFirmwareReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateFirmwareReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:onvif_firmware_update.UpdateFirmwareReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:onvif_firmware_update.UpdateFirmwareReply)
    MergeFrom(*source);
  }
}

void UpdateFirmwareReply::MergeFrom(const UpdateFirmwareReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onvif_firmware_update.UpdateFirmwareReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void UpdateFirmwareReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:onvif_firmware_update.UpdateFirmwareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateFirmwareReply::CopyFrom(const UpdateFirmwareReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onvif_firmware_update.UpdateFirmwareReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateFirmwareReply::IsInitialized() const {

  return true;
}

void UpdateFirmwareReply::Swap(UpdateFirmwareReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateFirmwareReply::InternalSwap(UpdateFirmwareReply* other) {
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateFirmwareReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFirmwareReply_descriptor_;
  metadata.reflection = UpdateFirmwareReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateFirmwareReply

// optional string version = 1;
void UpdateFirmwareReply::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateFirmwareReply::version() const {
  // @@protoc_insertion_point(field_get:onvif_firmware_update.UpdateFirmwareReply.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateFirmwareReply::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onvif_firmware_update.UpdateFirmwareReply.version)
}
 void UpdateFirmwareReply::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onvif_firmware_update.UpdateFirmwareReply.version)
}
 void UpdateFirmwareReply::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onvif_firmware_update.UpdateFirmwareReply.version)
}
 ::std::string* UpdateFirmwareReply::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:onvif_firmware_update.UpdateFirmwareReply.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateFirmwareReply::release_version() {
  // @@protoc_insertion_point(field_release:onvif_firmware_update.UpdateFirmwareReply.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateFirmwareReply::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:onvif_firmware_update.UpdateFirmwareReply.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace onvif_firmware_update

// @@protoc_insertion_point(global_scope)
